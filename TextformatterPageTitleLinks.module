<?php
namespace Processwire;

class TextformatterPageTitleLinks extends Textformatter implements Module
{
    /**
     * The name of the field used for replacements.
     */
    public const TITLE_FIELD_NAME = 'title';

    /**
     * The database column name (excluding language id).
     */
    public const DB_COLUMN = 'data';

    /**
     * @var array $language_titles_cache Holds cached data for getTitleIdArrayForCurrentLanguage().
     */
    private static $language_titles_cache = [];

    /**
     * @var bool $fields_are_multilanguage Stores multilanguage information for fieldIsMultilanguage().
     */
    private static $fields_are_multilanguage = [];

    /**
     * @var array $add_attributes_parsed This will hold the parsed attributes option - we don't want to do the work twice.
     */
    private static $add_attributes_parsed = [];

    /**
     * Get the module info.
     *
     * @return array
     */
    public static function getModuleInfo(): array
    {
        return [
            'title' => __('Automatically link page titles'),
            'summary' => __('This converts all page titles to a link to the corresponding page.'),
            'author' => "Moritz L'Hoest",
            'version' => '2.1.0',
            'href' => 'https://github.com/MoritzLost/TextformatterPageTitleLinks',
            'icon' => 'link',
            'requires' => [
                'PHP>=7.1.0',
            ]
        ];
    }

    /**
     * Shortcut to $this->formatValue using the current page.
     *
     * @param string $str
     * @return void
     */
    public function format(&$str): void
    {
        $this->formatValue($this->wire('page'), new Field(), $str);
    }

    /**
     * Automatically convert titles of pages in the passed text to links to
     * those pages. Check out the module documentation for more information.
     *
     * @param Page $page
     * @param Field $field
     * @param string $value
     * @return void
     */
    public function formatValue(Page $page, Field $field, &$value): void
    {
        // no templates set yet
        if (empty($this->auto_link_templates)) {
            return;
        }

        // if this is a repeater (matrix) page, make sure
        // $page references the "real" current page
        if (
            $page instanceof RepeaterPage ||
            $page instanceof RepeaterMatrixPage
        ) {
            $page = wire('page');
        }

        // get all pages of the selected templates as an associative id => title array
        $id_title_array = $this->getTitleIdArrayForCurrentLanguage();

        // exclude current id from this replacement if the option to include it is not active
        if (!$this->include_current_page) {
            $current_id = (int) $page->id;
            if (!empty($current_id) && array_key_exists($current_id, $id_title_array)) {
                unset($id_title_array[$current_id]);
            }
        }

        // abort if no linkable pages exist at this point
        if (empty($id_title_array)) {
            return;
        }

        // perform the replacement with a regex call
        $value = preg_replace_callback(
            // format the titles as regex patterns
            array_map(function ($title) {
                // explanation for lookaheads / lookbehinds:
                // [\w] - don't match page titles within longer words
                // [^<]*</a> - don't match words directly inside existing anchors
                // [^<>]*> - don't match inside attributes of start tags (e.g. in title attributes)
                return '[(?<![\w])' . preg_quote($title) . '(?!([\w]|[^<]*</a>)|[^<>]*>)]u';
            }, $id_title_array),
            // replace the titles with links to the url to the respective page
            function (array $matches) use ($id_title_array) {
                $page_id = array_search($matches[0], $id_title_array);
                $linked_page = $this->pages->get((int) $page_id);
                return $this->buildTitlePageLink($matches[0], $linked_page);
            },
            $value
        );
    }

    /**
     * Gets an array of id => title pairs of all pages that are valid title
     * replacement targets. Will return a cached result after the first call.
     * Uses module configuration to figure out which pages to select.
     *
     * @return array
     */
    private function getTitleIdArrayForCurrentLanguage(): array
    {
        // language id will be used for caching, not necessarily the "real" language id
        $language_id = $this->getLanguageIdForCaching();

        // only run the database query once per request & language
        if (
            array_key_exists($language_id, self::$language_titles_cache) &&
            !empty(self::$language_titles_cache[$language_id])
        ) {
            return self::$language_titles_cache[$language_id];
        }

        // use the language specific row if the site has language support, the
        // current language is not the default one and the field is a
        // multilanguage field
        $Q_VALUE_COLUMN = self::DB_COLUMN;
        if (
            $language_id &&
            !$this->languages->get($language_id)->isDefault() &&
            $this->fieldIsMultilanguage($this->fields->get(self::TITLE_FIELD_NAME))
        ) {
            $Q_VALUE_COLUMN .= $language_id;
        }

        // allowed templates for IN statement
        $Q_ALLOWED_TEMPLATES = implode(', ', $this->auto_link_templates);

        // unpublished pages will never be linked
        $Q_STATUS_BITMASK = Page::statusUnpublished;
        // hidden pages will only be included if the option is set
        if (!$this->include_hidden_pages) {
            $Q_STATUS_BITMASK += Page::statusHidden;
        }

        // the name of the table, usually "field_title"
        $Q_DB_TABLE = Field::tablePrefix . self::TITLE_FIELD_NAME;

        // for duplicate titles, we need to aggregate the id column, or we get
        // an error depending on the mysql mode; we'll use the preference for
        // older/newer pages, corresponding to the MIN/MAX aggregation function;
        // this works in most cases since higher ids will correspond to pages
        // that were created later.
        $Q_TITLE_AGGR_FUNC = !empty($this->same_title_order) ? $this->same_title_order : 'MIN';

        // minimum length for linkable titles
        $Q_MIN_LENGTH = !empty($this->minimum_length) ? $this->minimum_length : 0;

        /**
         * The main query to get all titles for matching templates. Caveats:
         * - If multiple pages have the same name, a random one will be selected.
         * - If the language value is NULL, there's currently no fallback to the default language.
         */
        $query = "SELECT
                {$Q_TITLE_AGGR_FUNC}({$Q_DB_TABLE}.pages_id),
                {$Q_DB_TABLE}.{$Q_VALUE_COLUMN} AS title
            FROM pages
            LEFT JOIN {$Q_DB_TABLE} ON pages.id = {$Q_DB_TABLE}.pages_id
            WHERE pages.templates_id IN ({$Q_ALLOWED_TEMPLATES})
            AND pages.status & {$Q_STATUS_BITMASK} = 0
            AND {$Q_DB_TABLE}.{$Q_VALUE_COLUMN} IS NOT NULL
            AND CHAR_LENGTH({$Q_DB_TABLE}.{$Q_VALUE_COLUMN}) >= {$Q_MIN_LENGTH}
            GROUP BY title
            ORDER BY CHAR_LENGTH(title) DESC";
        // query the database and add the results to the language title cache
        return self::$language_titles_cache[$language_id] = $this
            ->wire('database')
            ->pdo()
            ->query($query)
            ->fetchAll(\PDO::FETCH_KEY_PAIR);
    }

    /**
     * Get the ID of the current language, if it is relevant to the module. If
     * the language is not relevant, it will return 0.
     *
     * @return int The language ID.
     */
    private function getLanguageIdForCaching(): int
    {
        $current_lang = $this->wire('user')->language;
        // only use individual ids per language if the site has language support
        // and the title field is a multilanguage field
        if (
            !empty($current_lang) &&
            $current_lang instanceof Language &&
            $this->fieldIsMultilanguage($this->fields->get(self::TITLE_FIELD_NAME))
        ) {
            return $current_lang->id;
        }
        return 0;
    }

    /**
     * Checks if the passed field is a multilanguage field.
     *
     * @param Field $field
     * @return boolean
     */
    private function fieldIsMultilanguage(Field $field): bool
    {
        // cache the result for each field to avoid unnecessary api calls
        $name = $field->name;
        if (isset(self::$fields_are_multilanguage[$name])) {
            return self::$fields_are_multilanguage[$name];
        }
        $is_multilanguage = $field->getFieldtype() instanceof FieldtypeLanguageInterface;
        self::$fields_are_multilanguage[$name] = $is_multilanguage;
        return $is_multilanguage;
    }

    /**
     * Return a link pointing to the url of the passed page with the passed
     * title as the link text. Will add link classes based on the module
     * configuration, using the passed page for replacements. May return just
     * the title if the user doesn't have access to view the page.
     *
     * @param string $title The title to use as the link text.
     * @param Page $page The page to use for the link, replacements and access checks.
     * @return string
     */
    private function buildTitlePageLink(string $title, Page $page): string
    {
        // check if the user can view the page, otherwise just return the title as-is
        if (!$page->viewable()) {
            return $title;
        }

        // build url and other attributes
        $url = $page->url();
        $attribute_string = '';
        if (!empty($this->add_attributes)) {
            $attributes = $this->parseAttributeOption($this->add_attributes);
            $attribute_string = $this->getAttributesString($attributes, $page);
        }

        return '<a href="' . $url . '"' . $attribute_string . '>' . $title . '</a>';
    }

    /**
     * Parse a multiline string as input on the module settings page into an
     * associative attribute => value array.
     * 
     * @var string $attributes_input The multiline string to parse.
     */
    private function parseAttributeOption(string $attributes_input): array
    {
        // return the cached value, if present
        if (!empty(self::$add_attributes_parsed)) {
            return self::$add_attributes_parsed;
        }
        // parse the multiline input into an array, ignoring empty lines
        $attributes = preg_split('/[\n\r]+/', $attributes_input, -1, PREG_SPLIT_NO_EMPTY);
        // extract the result into an associative attribute => value array
        $attributes = array_reduce($attributes, function($new, $line) {
            // for attributes without a value (standalone attributes), we
            // include it as a name => boolean attribute
            if (strpos($line, '=') === false) {
                $new[trim($line)] = true;
            } elseif (substr_count($line, '=') > 1) {
                throw new \Exception('Each line in the attributes setting may contain only one equals sign (=).');
            } else {
                // extract attribute name and value from the current line
                [$attr_name, $attr_value] = explode('=', $line);
                $new[trim($attr_name)] = trim($attr_value);
            }
            return $new;
        }, []);
        return self::$add_attributes_parsed = $attributes;
    }

    /**
     * Formats the passed attributes as a string, using optional markup replacements
     * with the passed page.
     *
     * @param ?string $attributes The attributes as input on the settings page (textarea input).
     * @param Page|null $page The page for replacements.
     * @return string
     */
    private function getAttributesString(array $attributes, ?Page $page = null): string
    {
        if (empty($attributes)) {
            return '';
        }
        $attr_filtered = [];
        foreach ($attributes as $name => $value) {
            // bool attributes are included as standalone, without a value
            if (is_bool($value)) {
                if (true === $value) {
                    $attr_filtered[] = $name;
                }
                continue;
            }

            // use the passed page for replacements, if any
            $parsed_value = $page ? $page->getText($value, true, false) : $value;
            switch ($name) {
                case 'class':
                    // special escaping for classes
                    $parsed_value = trim(preg_replace('/[^a-zA-Z0-9 _-]/', '_', $parsed_value), ' ');
                    break;
                case 'href':
                    // we filter out href, since it's automatically generated
                    continue 2;
                default:
                    break;
            }
            $attr_filtered[] = $name . '="' . htmlspecialchars($parsed_value, ENT_HTML5, 'UTF-8') . '"';
        }
        return ' ' . implode(' ', $attr_filtered);
    }
}
