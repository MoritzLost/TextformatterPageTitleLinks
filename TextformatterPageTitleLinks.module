<?php
namespace Processwire;

class TextformatterPageTitleLinks extends Textformatter implements Module
{
    const CACHE_NAMESPACE = 'TextformatterPageTitleLinks-';

    /**
     * @var array $language_titles_cache Holds cached data for getTitleIdArrayFromDatabase().
     */
    private static $language_titles_cache = [];

    /**
     * Get the module info.
     *
     * @return array
     */
    public static function getModuleInfo(): array
    {
        return [
            'title' => __('Automatically link page titles'),
            'summary' => __('This converts all page titles to a link to the corresponding page.'),
            'author' => 'Moritz L\'Hoest, herebedragons.world',
            'version' => '1.0.0',
            'href' => 'https://github.com/MoritzLost/TextformatterPageTitleLinks',
            'icon' => 'link',
            'requires' => [
                'PHP>=7.1.0',
            ]
        ];
    }

    /**
     * Shortcut to $this->formatValue using the current page.
     *
     * @param string $str
     * @return void
     */
    public function format(&$str): void
    {
        $this->formatValue($this->wire('page'), new Field(), $str);
    }

    /**
     * Automatically convert titles of pages in the passed text to links to
     * those pages. check out the module documentation for more information.
     *
     * @param Page $page
     * @param Field $field
     * @param string $value
     * @return void
     */
    public function formatValue(Page $page, Field $field, &$value): void
    {
        // no templates set yet
        if (empty($this->auto_link_templates)) {
            return;
        }

        // if this is a repeater (matrix) page, make sure
        // $page references the "real" current page
        if (
            $page instanceof RepeaterPage ||
            $page instanceof RepeaterMatrixPage
        ) {
            $page = wire('page');
        }

        // get all pages of the selected templates as an associative id => title array
        $id_title_array = $this->getTitleIdArrayFromDatabase();

        // exclude current id from this replacement if the option to include it is not active
        if (!$this->include_current_page) {
            $current_id = (int) $page->id;
            if (!empty($current_id) && array_key_exists($current_id, $id_title_array)) {
                unset($id_title_array[$current_id]);
            }
        }

        // abort if no linkable pages exist at this point
        if (empty($id_title_array)) {
            return;
        }

        // perform the replacement with a regex call
        $value = preg_replace_callback(
            // format the titles as regex patterns
            array_map(function ($title) {
                return '[(?<![\w])' . preg_quote($title) . '(?![\w])]';
            }, $id_title_array),
            // replace the titles with links to the url to the respective page
            function (array $matches) use ($id_title_array) {
                $page_id = array_search($matches[0], $id_title_array);
                $linked_page = $this->pages->get((int) $page_id);
                return $this->buildTitlePageLink($matches[0], $linked_page);
            },
            $value
        );
    }

    /**
     * Return a link pointing to the url of the passed page with the passed
     * title as the link text. Will add link classes based on the module
     * configuration, using the passed page for replacements. May return just
     * the title if the user doesn't have access to view the page.
     *
     * @param string $title The title to use as the link text.
     * @param Page $page The page to use for the link, replacements and access checks.
     * @return string
     */
    private function buildTitlePageLink(string $title, Page $page): string
    {
        // check if the user can view the page, otherwise just return the title as-is
        if (!$page->viewable()) {
            return $title;
        }

        // build attributes
        $url = $page->url();
        $class_attribute = '';
        $css_class = $this->add_link_class;
        if (!empty($css_class)) {
            if (strpos($css_class, '{') !== false && strpos($css_class, '}') !== false) {
                // enable passing page fields to be used for the class, e.g.:
                // "automatic-link template-{template}"
                $css_class = $page->getMarkup($css_class);
                // sanitize css class
                $css_class = trim(preg_replace('/[^a-zA-Z0-9 _-]/', '', $css_class), ' ');
            }
            $class_attribute = ' class="' . $css_class . '"';
        }

        return '<a href="' . $url . '"' . $class_attribute . '>' . $title . '</a>';
    }

    /**
     * Gets an array of id => title pairs of all pages that are valid title
     * replacement targets. Will return a cached result after the first call.
     * Uses module configuration to figure out which pages to select.
     *
     * @return array
     */
    private function getTitleIdArrayFromDatabase(): array
    {
        // detect language support
        $language_id = 0;
        $current_lang = $this->wire('user')->language;
        if (!empty($current_lang) && $current_lang instanceof Language) {
            $language_id = $current_lang->id;
        }

        // only run the database query once per request & language
        if (
            array_key_exists($language_id, self::$language_titles_cache) &&
            !empty(self::$language_titles_cache[$language_id])
        ) {
            return self::$language_titles_cache[$language_id];
        }

        $value_column = 'data';
        // change the row if the site has language support and
        // the current language is not the default one
        if ($language_id && !$current_lang->isDefault()) {
            $value_column .= $language_id;
        }

        // allowed templates for IN statement
        $allowed_templates = implode(', ', $this->auto_link_templates);

        // unpublished pages will never be linked
        $status_bitmask = Page::statusUnpublished;
        // hidden pages will only be included if the option is set
        if (!$this->include_hidden_pages) {
            $status_bitmask += Page::statusHidden;
        }

        /**
         * The main query to get all titles for matching templates. Caveats:
         * - If multiple pages have the same name, a random one will be selected.
         * - If the language value is NULL, there's currently no fallback to the default language.
         */
        $query = "SELECT
                field_title.pages_id,
                field_title.{$value_column} AS title
            FROM pages
            LEFT JOIN field_title ON pages.id = field_title.pages_id
            WHERE pages.templates_id IN ({$allowed_templates})
            AND pages.status & {$status_bitmask} = 0
            AND field_title.{$value_column} IS NOT NULL
            GROUP BY title
            ORDER BY LENGTH(title)";
        $titles = $this
                    ->wire('database')
                    ->pdo()
                    ->query($query)
                    ->fetchAll(\PDO::FETCH_KEY_PAIR);
        // add those titles to the language title cache
        self::$language_titles_cache = self::$language_titles_cache + [$language_id => $titles];
        return self::$language_titles_cache[$language_id];
    }

    /**
     * Probably not needed any more.
     */
    private function getLastModifiedNamespace(?PageArray $pages = null)
    {
        if (empty($pages)) {
            $pages = $this->wire('pages');
        }
        $timestamp = $pages->findOne('sort=-modified')->modified;
        return self::CACHE_NAMESPACE . $timestamp;
    }
}
