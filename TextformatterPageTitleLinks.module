<?php
namespace Processwire;

class TextformatterPageTitleLinks extends Textformatter implements Module
{
    const CACHE_NAMESPACE = 'TextformatterPageTitleLinks-';

    public static function getModuleInfo(): array
    {
        return [
            'title' => 'Automatically link page titles',
            'summary' => 'This converts all page titles to a link to the corresponding page.',
            'author' => 'Moritz L\'Hoest, herebedragons.world',
            'version' => '0.1.0',
            'requires' => [
                'PHP>=7.0.0'
            ]
        ];
    }

    public function format(&$str)
    {
        if (empty($this->auto_link_templates)) {
            return;
        }
        $id_title_array = $this->getTitleIdArrayFromDatabase();
        $str = preg_replace_callback(
            // format the titles as regex patterns
            array_map(function ($title) {
                return '[(?<![\w])' . preg_quote($title) . '(?![\w])]';
            }, $id_title_array),
            // replace the titles with links to the url to the respective page
            function (array $matches) use ($id_title_array) {
                $page_id = array_search($matches[0], $id_title_array);
                $url = $this->pages->get((int) $page_id)->url();
                return '<a href="' . $url . '">' . $matches[0] . '</a>';
            },
            $str
        );
    }

    public function formatValue(Page $page, Field $field, &$value)
    {
        $this->format($value);
    }

    private function getTitleIdArrayFromDatabase(): array
    {
        // current language row
        $language_row = 'data';
        // detect language support and change the row if
        // the current language is not the default one
        $current_lang = $this->wire('user')->language;
        if (!empty($current_lang) && !$current_lang->isDefault()) {
            $language_row .= $current_lang->id;
        }
        // allowed templates for IN statement
        $allowed_templates = implode(', ', $this->auto_link_templates);
        /**
         * The main query to get all titles for matching templates. Caveats:
         * - If multiple pages have the same name, a random one will be selected.
         * - If the language value is NULL, there's currently no fallback to the default language.
         */
        $query = "SELECT field_title.pages_id, field_title.{$language_row} AS title
            FROM field_title
            LEFT JOIN pages ON field_title.pages_id = pages.id
            WHERE pages.templates_id IN ({$allowed_templates}) AND field_title.{$language_row} IS NOT NULL
            GROUP BY title
            ORDER BY LENGTH(title)
            ";
        return $this->wire('database')->pdo()->query($query)->fetchAll(\PDO::FETCH_KEY_PAIR);
    }

    /**
     * Probably not needed any more.
     */

    private function getLastModifiedNamespace(?PageArray $pages = null)
    {
        if (empty($pages)) {
            $pages = $this->wire('pages');
        }
        $timestamp = $pages->findOne('sort=-modified')->modified;
        return self::CACHE_NAMESPACE . $timestamp;
    }
}
